---
- name: Network Health Check
  hosts: all
  gather_facts: no
  connection: local
  vars:
    check_timeout_default: 5
    ports_to_check_default: [80, 443]
    retry_count_default: 3
    retry_delay_default: 2

  tasks:
    - name: Set default variables if not defined
      ansible.builtin.set_fact:
        check_timeout: "{{ check_timeout | default(check_timeout_default) }}"
        ports_to_check: "{{ ports_to_check | default(ports_to_check_default) }}"
        retry_count: "{{ retry_count | default(retry_count_default) }}"
        retry_delay: "{{ retry_delay | default(retry_delay_default) }}"

    - name: Get current timestamp
      ansible.builtin.shell: "date '+%Y-%m-%d %H:%M:%S'"
      register: current_time
      changed_when: false

    - name: Set initial health status
      ansible.builtin.set_fact:
        health_status:
          host: "{{ inventory_hostname }}"
          status: "PENDING"
          checks: []
          start_time: "{{ current_time.stdout }}"
          end_time: null
          overall_status: "PENDING"

    - name: Perform ping test
      ansible.builtin.shell: |
        ping -c {{ retry_count }} {{ inventory_hostname }} | grep "avg"
      register: ping_result
      ignore_errors: yes
      changed_when: false

    - name: Set default ping stats
      ansible.builtin.set_fact:
        ping_stats:
          status: "DOWN"
          latency: "N/A"
          attempts: "{{ retry_count }}"

    - name: Update ping stats if successful
      ansible.builtin.set_fact:
        ping_stats:
          status: "UP"
          latency: "{{ ping_result.stdout | regex_search('min/avg/max/mdev = [\\d.]+/([\\d.]+)/', '\\1') | default('N/A') }}"
          attempts: "{{ retry_count }}"
      when: ping_result is defined and ping_result.stdout is defined and ping_result.stdout != ''

    - name: Check common ports
      ansible.builtin.wait_for:
        host: "{{ inventory_hostname }}"
        port: "{{ item }}"
        timeout: "{{ check_timeout }}"
      register: port_check
      loop: "{{ ports_to_check }}"
      ignore_errors: yes

    - name: Get end timestamp
      ansible.builtin.shell: "date '+%Y-%m-%d %H:%M:%S'"
      register: end_time
      changed_when: false

    - name: Compile health check results
      ansible.builtin.set_fact:
        health_status:
          host: "{{ inventory_hostname }}"
          status: "{{ 'HEALTHY' if ping_stats.status == 'UP' and port_check.results | selectattr('failed') | list | length == 0 else 'UNHEALTHY' }}"
          checks:
            - name: "Ping Test"
              status: "{{ ping_stats.status }}"
              details: "Latency: {{ ping_stats.latency }}ms, Attempts: {{ ping_stats.attempts }}"
            - name: "Port Checks"
              status: "{{ 'PASSED' if port_check.results | selectattr('failed') | list | length == 0 else 'FAILED' }}"
              details: |
                {% for result in port_check.results %}
                - Port {{ result.item }}: {{ 'OPEN' if not result.failed else 'CLOSED' }}
                {% endfor %}
          end_time: "{{ end_time.stdout }}"
          overall_status: "{{ 'HEALTHY' if ping_stats.status == 'UP' and port_check.results | selectattr('failed') | list | length == 0 else 'UNHEALTHY' }}"

    - name: Display health check results
      ansible.builtin.debug:
        msg: |
          ===== Health Check Results for {{ health_status.host }} =====
          Overall Status: {{ health_status.overall_status }}
          Start Time: {{ health_status.start_time }}
          End Time: {{ health_status.end_time }}
          
          Detailed Checks:
          {% for check in health_status.checks %}
          - {{ check.name }}:
            Status: {{ check.status }}
            Details:
            {{ check.details | indent(14) }}
          {% endfor %}
          
          ============================================

    - name: Set AWX job status
      ansible.builtin.set_fact:
        awx_job_status: "{{ 'success' if health_status.overall_status == 'HEALTHY' else 'failed' }}"
      when: health_status is defined

    - name: Fail if health check failed
      ansible.builtin.fail:
        msg: "Health check failed for {{ inventory_hostname }}. See detailed results above."
      when: health_status.overall_status == 'UNHEALTHY'
